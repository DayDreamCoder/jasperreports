<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style>
        /* hides all elements in the copyright bar */
        .gm-style-cc {
            display: none;
        }

        /* restores the copyright element */
        .gmnoprint:nth-child(2) .gm-style-cc {
            display: unset;
        }
    </style>
</head>
<body>
    <div style='width: ${elementWidth}px; height: ${elementHeight}px;
        #if(${backgroundColor})
            background-color: \#${backgroundColor};
        #end
    '>
        <div id='mapContainer' style='width: 100%; height: 100%; overflow: auto'></div>
        <div class="jr_map_legend_wrapper" style="display: none;">
            <div id="mapContainer_legend" dragable="false" style="display: flex;justify-content:flex-start;font-family:Roboto,Arial,sans-serif;background-color:#fff;margin:10px;border-radius:2px;user-select:none;padding:5px 10px 5px 10px;overflow:auto;"></div>
        </div>
    </div>
    <script>
        ${externalScriptLoadApi}

        const __jr__modules__ = new Map();
        let __jr__define__;

        (function() {
            // keep define in isolated scope
            const define = (moduleName, moduleFn) => {
                if (!__jr__modules__.has(moduleName)) {
                    __jr__modules__.set(moduleName, new Promise((resolve, reject) => {
                        try {
                            resolve(moduleFn());
                        } catch(e) {
                            reject(e);
                        }
                    }));
                }
            };

            // these scripts call define
            ${jasperreportsMapApiScript}

            __jr__define__ = define;
        })();

        const __jr__require__ = function(moduleNamesArr, processingFn) {
            const modulePromises = moduleNamesArr.map(moduleName => __jr__modules__.get(moduleName));
            return Promise.all(modulePromises)
                    .then(processingFn)
                    .catch(e => window["console"] && window["console"].error(e));
        };

        __jr__define__("googleMapsApi", function() {
            return __jr__jsonp__load__script__("${googleMapsApiUrl}");
        });

        __jr__define__("markerClustererApi", function() {
            return __jr__load__script__("${markerClustererApiUrl}");
        });

        const deferredArr = [];
        const mapTilesReadyPromise = new Promise(function(resolve, reject) {
            deferredArr.push({ resolve, reject });
        });
        const mapCopyrightReadyPromise = new Promise(function(resolve, reject) {
            deferredArr.push({ resolve, reject });
        });

        __jr__require__(["jasperreportsMapApi", "googleMapsApi", "markerClustererApi"], async (promiseReturnArr) => {
            const jasperreports = await promiseReturnArr[0]();

            let jrMapConfig = {
                ${mapConfig}
            };
            jrMapConfig = jrMapConfig["${mapCanvasId}"];

            jasperreports.map.draw({
                mapCanvasId: "mapContainer",
                mapInstanceData: jrMapConfig.instanceData,
                isForExport: true
            }).then(map => {
                /*
                 * tilesloaded event ensures the map tiles have finished rendering
                 */
                map.addListener("tilesloaded", function() {
                    console.log("maps tilesloaded event triggered");

                    // resolve mapTilesReadyPromise
                    deferredArr[0].resolve();

                    // start checking for copyright display
                    checkCopyrightRendered();
                });
            });
        });

        /*
         * Scans for the presence of elements with class "gm-style-cc" that make up the copyright bar.
         * Once these elements are present ont the page, we need to look for a span on the second element to know the
         * copyright is displayed.
        */
        function checkCopyrightRendered() {
            console.log("checkCopyrightRendered: waiting for 'gm-style-cc' elements to be rendered on page");
            const checkInterval = window.setInterval(() => {
                const copyrightElements = document.getElementsByClassName("gm-style-cc");
                if (copyrightElements.length > 1 && copyrightElements[1].querySelector("span") !== null) {
                    clearInterval(checkInterval);
                    checkCopyrightFontLoaded(copyrightElements[1].querySelector("span"));
                }
            }, 50);
        }

        /*
         * Google maps loads custom google webfonts such as Roboto to display copyright info, so we need to wait for it
         * to be loaded before taking the screen capture
        */
        function checkCopyrightFontLoaded(copyrightElement) {
            // the copyright element is usually the second in the list, inside a span element
            const computedStyle = window.getComputedStyle(copyrightElement);
            const fontSize = computedStyle.getPropertyValue("font-size");
            const firstFontFromFamily = computedStyle.getPropertyValue("font-family").split(",")[0];
            const fontFace = fontSize + " " + firstFontFromFamily;

            console.log(`checkCopyrightFontLoaded: try waiting for fontFace "${fontFace}" to be loaded`);
            const checkInterval = window.setInterval(() => {
                let fontFaceLoaded = null
                try {
                    fontFaceLoaded = document.fonts.check(fontFace);
                } catch(e) {
                    console.log(`Something went wrong when checking for fontFace: ${fontFace}`);
                    fontFaceLoaded = true;
                }
                if (fontFaceLoaded) {
                    clearInterval(checkInterval);

                    // resolve mapCopyrightReadyPromise
                    deferredArr[1].resolve();
                }
            }, 50);
        }

        function renderResult() {
            return new Promise(function(resolve, reject) {
                // wait for map tiles and the copyright to be ready
                Promise.all([mapTilesReadyPromise, mapCopyrightReadyPromise])
                    .then(() => {
                        const pageDimensions = getPageDimensions();
                        resolve(pageDimensions);
                    })
                    .catch(err => reject(err));
            });
        }

        function getPageDimensions() {
            const body = document.getElementsByTagName('body')[0];

            body.style.marginTop = '0px';
            body.style.marginLeft = '0px';
            const element = body.children[0];

            return {
                width: Number(element.offsetWidth),
                height: Number(element.offsetHeight)
            };
        }
    </script>
</body>
</html>
