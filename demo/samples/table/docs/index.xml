<?xml version="1.0" encoding="UTF-8"?>

<sample>

  <name>table</name>
  <title>Table Sample</title>
  <description>Illustrates the usage of the table component element.</description>

  <mainFeature ref="table"/>
  
  <!-- table -->
  
  <feature name="table" title="Using the Built-in Table Component">
    <description>
How to render tabular data using the built-in table component and a subdataset.
    </description>
    <since>3.7.2</since>
    <documentedBy>
      <author>
    	<name>Sanda Zaharia</name>
    	<email>shertage@users.sourceforge.net</email>
      </author>
    </documentedBy>
    <otherSample ref="tabular"/>
    <otherSample ref="list"/>
    <otherSample ref="pdfa"/>
    <content>
<subtitle name="overview">The Built-in Table Component - Overview</subtitle>
<br/>
<br/>
Tables represent one of the most popular layout for data reporting, especially when numeric data are involved. Tables are 
necessary when data has to be organized in distinct rows and columns in order to be displayed. One could consider tables as 
groups of distinct columns sharing the same number of rows, populated with significant data. Such kind of simple tabular layout 
could be designed using either report elements along with their border to form a table-like structure (as shown in the 
<a href="../tabular/index.html">Tabular Sample</a>), or a built-in list component with elements organized on a row in the list content 
(see the <a href="../list/index.html">Built-in List Component Sample</a>).
<br/>
But what if the table deals with a very complex structure, where table headers are present side by side with column headers, or column 
group footers are mixed together with single column footers, or particular cells span over multiple rows and/or columns? In this case tabular and 
list layouts require more and more elaborated work in order to put all this information together. A dedicated tool is needed instead.
<br/>
And here comes the JR built-in table component to demonstrate its utility.
<br/>
<br/>
<subtitle name="schema">The Table Component Structure</subtitle>
<br/>
<br/>
The table component is characterized by the <code>kind="table"</code> component attribute. It is based on a very simple structure of column groups 
and/or single columns populated with data. Single columns (<code>kind="single"</code>) and column groups (<code>kind="group"</code>) are both extensions 
of a <code>&lt;column&gt;</code> element characterized by a series of headers and footers and 
a <code>printWhenExpression</code>. To be well defined, a <code>BaseColumn</code> requires the <code>width</code> attribute to be set. 
By default the column width will be inherited by all table cells in the column.
<br/>
In addition, columns and/or column groups may contain:
<ul>
<li>table headers</li>
<li>group headers</li>
<li>column headers</li>
<li>table footers</li>
<li>group footers</li>
<li>column footers</li>
</ul>
A column group is a recursive structure consisting in a group of columns and/or nested column groups that act 
together like a single column, sharing the same footers and headers.
<br/>
Single columns provide their specific element: a <code>detailCell</code> to be populated with data and printed out for each iteration through 
the datasource, similar to elements defined in a report detail section.
<br/>
Any detail cell may contain any number of report elements fitting within its bounds. It may have its own border, 
style and row span. But in order to be well defined, the <code>height</code> attribute is mandatory in a cell.
<br/>
<br/>
Finally, to make a table component fully functional, a <code>datasetRun</code> declaration is required within the <code>table</code> element.
<br/>
<br/>
<subtitle name="sample">The Table Component Sample</subtitle>
<br/>
<br/>
Now let's see a table component in action. The table defined in the <code>TableReport.jrxml</code> is similar to that one defined in the 
<a href="../tabular/index.html">Tabular Sample</a>: it contains three independent columns with column headers and footers, plus a column 
group with 2 columns sharing a common header, but owning also individual column headers and footers. Below is a fragment from the related code, 
that contains the definition of the first column in the table:
<pre><![CDATA[
<element kind="component" uuid="c475c968-5a05-4331-8147-5fc24a48070b" y="50" width="555" height="100" style="Table">
  <component kind="table">
    <datasetRun uuid="6770b532-f93b-49b2-a105-2ae35d01ec87" subDataset="TableData">
      <dataSourceExpression><![CDATA[$P{TableDataSource}]] ></dataSourceExpression>
    </datasetRun>
    <column kind="single" uuid="ceaf6eb4-f1e9-4aa8-aca6-3e53b67c1615" width="100">
      <columnHeader height="30" rowSpan="2" style="TableHeader">
        <element kind="staticText" width="100" height="30" vTextAlign="Middle" bold="true" fontSize="12.0">
          <text><![CDATA[Header 1]] ></text>
          <box leftPadding="10">
            <pen lineColor="#000000"/>
            <bottomPen lineWidth="0.5"/>
          </box>
        </element>
      </columnHeader>
      <columnFooter height="15" style="TableFooter">
        <element kind="staticText" uuid="54493ad7-b6d2-4f58-94a5-7428d5cfef7b" width="100" height="15" vTextAlign="Middle" bold="true" fontSize="12.0">
          <text><![CDATA[Total 1]] ></text>
          <box leftPadding="10">
            <pen lineColor="#000000"/>
          </box>
        </element>
      </columnFooter>
      <detailCell height="15">
        <element kind="textField" uuid="c6a3b183-a488-4535-9187-6c4250a443b6" width="100" height="15" textAdjust="StretchHeight">
          <expression><![CDATA[$V{Column1}]] ></expression>
          <box leftPadding="10">
            <bottomPen lineWidth="0.5"/>
          </box>
        </element>
      </detailCell>
    </column>
    ...
  </component>
  <property name="net.sf.jasperreports.export.pptx.frame.as.table" value="true"/>
</element>]]></pre>
Notice that the column declaration contains a <code>columnHeader</code>, <code>columnFooter</code> and a <code>detailCell</code>. 
<br/>
<br/>
The subsequent column groupin the report includes a <code>columnHeader</code> declaration and two separate columns. The group <code>columnHeader</code> 
will be shared by all columns in the group, inheriting the width of the column group. Individual column headers will be printed on a separate row, 
under the common group header. To keep the table rows consistency, the <code>rowSpan="2"</code> setting was required in the header declarations for 
the first three individual columns in the table.
<br/> 
There is no <code>columnFooter</code> declared at column group level in this example.
<br/>
It should also be noticed how <code>box</code> elements and <code>style</code> attributes were used to configure borders and styles for different table cells.
<br/>
<br/>
<b>Running the Sample</b>
<br/>
<br/>
Running the sample requires the <a href="https://maven.apache.org/">Apache Maven</a> library. Make sure that <code>maven</code> is already installed on your system (version 3.6 or later).
<br/>
In a command prompt/terminal window set the current folder to <code>demo/samples/table</code> within the JasperReports source project 
and run the following command:
<br/>
<br/>
<code>&gt; mvn exec:java</code>
<br/>
<br/>
It will generate all supported document types containing the sample report in the <code>demo/samples/table/target/reports</code> directory.
    </content>
  </feature>

</sample>
